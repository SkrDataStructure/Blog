<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基础</title>
      <link href="/2022/11/10/MySql%20%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/11/10/MySql%20%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="MySql-基础"><a href="#MySql-基础" class="headerlink" title="MySql 基础"></a>MySql 基础</h1><h2 id="1-认识Mysql"><a href="#1-认识Mysql" class="headerlink" title="1.认识Mysql "></a>1.认识Mysql </h2><ol><li>MySql 三层结构</li></ol><ul><li><p>DBMS 数据库管理系统</p><ul><li>DataBase1<ul><li>表</li><li>表2…..</li></ul></li><li>DataBase2<ul><li>表1</li><li>表2…..</li></ul></li><li>DataBase……</li></ul></li><li><p>MySql 不区分大小写</p></li></ul><p>我们所说的数据库包含上述三层结构，当然除了上述内容外还有些其他功能结构。</p><p>客户端——&gt;    通过port 3306 —–&gt;数据库（数据存储的各种数据）</p><p>数据库分为；</p><ol><li><p>关系型数据库</p><p> 通过表和表之间，行和列之间的关系进行数据的存储</p></li><li><p>非关系型数据库</p><p>Redis，MongDB</p></li></ol><h2 id="2-创建一个数据库"><a href="#2-创建一个数据库" class="headerlink" title=" 2.创建一个数据库"></a> 2.创建一个数据库</h2><ul><li>CHARACTER SET：指定数据采用的字符集如果不指定 默认为uft_8</li><li>COLLATE：指定数据可字符集的校对规则(常用utf_bin【严格区分大小写】、utf8_general_ci  【不区大小写 默认】)</li></ul><hr><p>注意:</p><p>​校对 不区分大小写，如果表中数据存在相同字段但大小写不同，只会显示一条结果；</p><hr><blockquote><p>CREATE DATABASE [IF NOT EXISTS] name CHARACTER 字符集名称 COLLATE 校对规则</p><p>[IF NOT EXISTS] 如果DB存在不会执行</p><p>省略后如果创建书库存在则会报错，</p></blockquote><p>创建数据库&amp;删除数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#创建数据库  不指定字符集 和 校对规则 则默认 一般为utf8(mb3)  新版的utf8mb4</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE hsp_db01</span><br><span class="line"></span><br><span class="line">#删除数据库</span><br><span class="line"><span class="keyword">DROP</span> DATABASE hs_db01</span><br><span class="line"><span class="keyword">DROP</span> DATABASE hsp_da02</span><br><span class="line"></span><br><span class="line">#创建一个使用utf8mb4 的字符集 的 hsp_da02数据库</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE hsp_da02 <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4</span><br><span class="line"></span><br><span class="line">#创建一个使用utf8mb4  校对规则为utf8mb4_bin 不区分大小写</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE hsp_da03 <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#显数DB</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES</span><br><span class="line">#显示差创建的数据库语句</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE db_name</span><br><span class="line">#删除 DB</span><br><span class="line"><span class="keyword">DROP</span> DATABASE [IF <span class="keyword">EXISTS</span>] name </span><br></pre></td></tr></table></figure><h2 id="3-备份数据库"><a href="#3-备份数据库" class="headerlink" title="3.备份数据库"></a>3.备份数据库</h2><p>Dos命令行</p><p>​备份数据库</p><blockquote><p>mysqldump -u user_name -p -B DB1 DB2 … &gt; file_name.sql</p></blockquote><p>​备份数据库中的表</p><blockquote><p>mysqldump -u user_name -p DB1 tb1 tb2 … &gt; file_name.sql</p></blockquote><p>注意：</p><ol><li>添加环境，每天加去bin目录启动</li><li>不要在sql控制台输入 会报错</li><li>-p 后密码不要输入  回车后输入</li></ol><p>恢复数据库</p><blockquote><p>Source file_name</p></blockquote><hr><h2 id="4-创建表"><a href="#4-创建表" class="headerlink" title="4.创建表"></a>4.创建表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE (</span><br><span class="line">file1 datatype,</span><br><span class="line">    file2 datatype,</span><br><span class="line">...</span><br><span class="line">)character set 字符集 collate 校对规则 engine 引擎</span><br><span class="line"></span><br><span class="line">#character set 默认与数据库一致</span><br><span class="line">#collate 默认与数据库一致</span><br></pre></td></tr></table></figure><p>创建表示注意确认当前是在那个数据库</p><hr><h2 id="5-MySql-数据类型"><a href="#5-MySql-数据类型" class="headerlink" title="5.MySql 数据类型"></a>5.MySql 数据类型</h2><ul><li>也称作列类型</li></ul><p>引入一下整形 范围和 正负的 理解，我们都知道1byte等于8bit</p><p>char c;  这个字符c 能表示的范围为 2^8 也就是0-255</p><p>short int i; 短整形 站2byte  2^16 也就是 -32768 —  + 32767 </p><p>unsigned  short int； 这个无符号类型 则是 0-65535</p><p>在二进制中正负实现规则为下，任意一个非unsigned整形 最高位是用来存放0   1     0表示没有符号也就是为正  1表示有符号也就为负</p><p>所以 实际存放数值的只有15位二进制数，2^15 就为 0-32767了  </p><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><ul><li><p>整形</p><ul><li>bit(M) [m指定位数 默认1 范围1-64]是以二进制输出的 比如 bit(8) &#x3D;255  输出的  ‘11111111’</li><li>tinyint [1byte]</li><li>smallint [2byte]</li><li>mediumint [3byte]</li><li>int [4byte]</li><li>bigint [8byte]</li></ul></li><li><p>小数类型</p><ul><li>float [单精度 4byte]</li><li>double [双精度 8byte]</li><li>decimal(M,D) [大小不确定]</li></ul></li><li><p>文本类型</p><ul><li>char [0-255 字符]</li><li>varchar [0-65535 字节 utf8编码 最大为21844字符 1-3个字节用于记录大小 如果编码为gbk 2个字符用记录大小]</li><li>text [0-65535]</li><li>longtext[0-2^32-1]</li></ul></li><li><p>二进制数据类型</p><ul><li>blob [0- 2^16-1]</li><li>longblob [0-2^32-1]</li></ul></li><li><p>时期类型</p><ul><li>date [日期 年月日]</li><li>year [年]</li><li>time [时间 时分秒]</li><li>datetime [年月日 时分秒]</li><li>timestamp [时间戳]</li></ul></li></ul><h3 id="使用规则：保小不保大"><a href="#使用规则：保小不保大" class="headerlink" title="使用规则：保小不保大"></a>使用规则：保小不保大</h3><p>在满足需求的情况下，经理选择占用空间较小的类型</p><h3 id="decimal-M-D"><a href="#decimal-M-D" class="headerlink" title="decimal(M,D)"></a>decimal(M,D)</h3><p>定点数精度非常高</p><p>双精度，两个参数decimal(m,d)   m &lt;&#x3D; 65 D &lt;&#x3D; 30 D默认为0 M默认为10</p><p>M为总小数位数  D为小数点后位数 D为0则内有小数点或者分数部分。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>char(size )  size 表示的是字符数（不论是否是中文还是其他）而不是字节，注意不好搞混了</p><p>varchar(size) 同理</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb`(</span><br><span class="line">`<span class="type">char</span>` <span class="type">CHAR</span>(),</span><br><span class="line">    `<span class="type">varchar</span>` <span class="type">VARCHAR</span>()</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb` <span class="keyword">VALUES</span>(<span class="string">&#x27;四个字符&#x27;</span>, <span class="string">&#x27;abcd&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221106221218148.png" alt="image-20221106221218148"></p><h4 id="1-CHAR-和-VARCHAR"><a href="#1-CHAR-和-VARCHAR" class="headerlink" title="1_CHAR 和 VARCHAR"></a>1_CHAR 和 VARCHAR</h4><p>char() 类型和数组一样 是定长的不可改变其大小，如果超出就会报错</p><p>优点：适合定长的字符串 并且执行效率很高 </p><p>缺点：长度不定时容易产生错误</p><p>varchar() 类型 是一种可边长数组 不定长 </p><p>优点：varchar 在对于不知道字符有多长时 有用处  </p><p>缺点：搜索没有char快速，并且空间利用也没有char高效</p><h4 id="2-TEXT、MEDIUMTEXT、LONGTEXT"><a href="#2-TEXT、MEDIUMTEXT、LONGTEXT" class="headerlink" title="2_TEXT、MEDIUMTEXT、LONGTEXT"></a>2_TEXT、MEDIUMTEXT、LONGTEXT</h4><p>text   0-2^16</p><p>mediumtext   0-2^24</p><p>longtext  [0-2^32-1]</p><p>文本类型，可替换varchar类型也是不定长字符串。适合用于非常长的字符串比如文章</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] `tb3` (</span><br><span class="line">`text` TEXT,</span><br><span class="line">`mediumtext` MEDIUMTEXT,</span><br><span class="line">`longtext` LONGTEXT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span>  [IF <span class="keyword">NOT</span>] `tb3` <span class="keyword">VALUE</span>(<span class="string">&#x27;这个类型很长&#x27;</span>, <span class="string">&#x27;可变长字符串&#x27;</span>, <span class="string">&#x27;汉子3字节1111这个一字节编码不同可能不一样&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20221106222840415.png" alt="image-20221106222840415"></p><p>—-注意后面的字节数</p>]]></content>
      
      
      <categories>
          
          <category> MySQL 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java  Day3</title>
      <link href="/2022/11/03/Java_Day3/"/>
      <url>/2022/11/03/Java_Day3/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-Day3"><a href="#Java-Day3" class="headerlink" title="Java Day3"></a>Java Day3</h1><h2 id="1-Scanner"><a href="#1-Scanner" class="headerlink" title="1.Scanner"></a>1.Scanner</h2><ul><li><p>.next() 在栈中以空格读取栈中输入</p></li><li><p>.nextLine() 读取在回车之前栈中的输入</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java -基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea 快捷键</title>
      <link href="/2022/11/03/Idea%20%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2022/11/03/Idea%20%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Idea-快捷键"><a href="#Idea-快捷键" class="headerlink" title="Idea 快捷键"></a>Idea 快捷键</h1><ul><li><p>删除整行ctrl + y </p></li><li><p>运行ctrl + shift + f11</p></li><li><p>新建&#x2F;添加 alt + insert</p></li><li><p>窗口变大变小ctrl + shift + f12</p></li><li><p>切换文件alt + 左右箭头</p></li><li><p>移动本行代码shift + alt +上下键  </p></li><li><p>切换窗口 alt + 数字键</p></li><li><p>提示方法参数类型ctrl + p （在括号里面有效）</p></li><li><p>光标位置</p><ul><li>home 回到头位置</li><li>end回到尾位置</li></ul></li><li><p>多行注释 ctrl + shift + &#x2F;</p></li><li><p>单行注释ctrl + &#x2F;</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂 -Idea 快捷键 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java  Day8</title>
      <link href="/2022/11/03/Java_Day8/"/>
      <url>/2022/11/03/Java_Day8/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-Day8"><a href="#Java-Day8" class="headerlink" title="Java Day8"></a>Java Day8</h1><h2 id="1-访问权限"><a href="#1-访问权限" class="headerlink" title="1.访问权限"></a>1.访问权限</h2><h3 id="public"><a href="#public" class="headerlink" title="public"></a>public</h3><p>公告的，所有包内包外都可以访问的</p><h3 id="default"><a href="#default" class="headerlink" title="default"></a>default</h3><p>包访问权限，在<strong>自己包内可以随意访问</strong></p><h3 id="private"><a href="#private" class="headerlink" title="private"></a>private</h3><p>私有的，自己类可访问</p><h2 id="2-getter-amp-setter"><a href="#2-getter-amp-setter" class="headerlink" title="2.getter &amp; setter"></a>2.getter &amp; setter</h2><ul><li><p>setter：主要给成员变量赋值的成员方法，做一定保护；</p></li><li><p>getter：从成员变量中获取值的成员方法；</p></li><li><p>通过成员方法访问或更改，给成员属性给予保护，使程序更加健壮</p></li><li><p>Idea 可以通过getter和setter 自动添加其方法</p></li></ul><p><img src="/%5Cimages%5Cimage-20221029090820497.png" alt="image-20221029090820497"></p><h2 id="3-继承"><a href="#3-继承" class="headerlink" title="3.继承"></a>3.继承</h2><ul><li>子类自动拥有父类中除了私有内容外的其他所有</li></ul><blockquote><p>继承：</p><p>public class 子类 extends 父类{</p><p>}</p></blockquote><ul><li>私有内容不能被继承</li><li>类不能加private修饰</li></ul><p>作用：简化代码的开发</p><p>子类是对父类进行扩展</p><p>思想：子类对父类的继承，将某种具有部分相同属性功能的类再进行抽象，建立一个共有属性的类，其余子类通过继承该父类，从而使开发变得更为简洁明了</p><h2 id="4-super"><a href="#4-super" class="headerlink" title="4.super"></a>4.super</h2><ul><li>变量的查找顺序，先找自己类然后再找父类，就近原则；</li><li>如果想要访问父类中的内容</li></ul><blockquote><p>super.*; 可访问子类中与父类重名的内容</p></blockquote><ul><li>在创建每一个子类对象时，编译器并为其分配内存，都在子类对象中隐式声明创建了一个父类并且先执行创建父类。而这个父类就是super</li></ul><h2 id="5-方法重写"><a href="#5-方法重写" class="headerlink" title="5.方法重写"></a>5.方法重写</h2><ul><li>子类对父类提供的方法进行重新定义</li><li>子类方法与父类方法完全一致</li><li>也叫作方法覆盖</li><li>super可以在子类中调用父类的方法</li></ul><p>半覆盖</p><p>​在子类重构方法中使用了super调用父类同名的方法</p><p>全覆盖</p><p>​重构了父类中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> <span class="keyword">extends</span> <span class="title class_">Demo2</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        半覆盖</span></span><br><span class="line"><span class="comment">//        super.pt();</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment">//         全覆盖</span></span><br><span class="line">        System.out.print(<span class="string">&quot;子类的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Demo1</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo1</span>();</span><br><span class="line">        d.pt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-多态"><a href="#6-多态" class="headerlink" title="6.多态"></a>6.多态</h2><p>实现多态的条件</p><ol><li>继承：必须要有子类继承父类的继承关系。</li><li>重写：子类需要对父类中的一些方法进行重写，然后调用方法时就会调用子类重写的方法而不是原本父类的方法。</li><li>向上转型：在多态中需要将子类的引用赋给父类对象，只有这样该引用才能够具备技能调用父类的方法和子类的方法。</li></ol><ul><li><p>同一个对象拥有多种形态 </p></li><li><p>把不同的数据类型进行统一</p></li></ul><p>把子类的对象赋值给父类的变量-&gt;向上转型（会屏蔽子类中特有的方法）</p><p>把父类的变量转化会子类的变量-&gt;向下转型(向下类型转型有风险必须强制转换) </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">   <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">age</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;动物&quot;</span> + <span class="built_in">this</span>.age);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;小黑&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">age</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物的你年龄&quot;</span> + <span class="built_in">this</span>.age);</span><br><span class="line">        System.out.println(<span class="string">&quot;猫&quot;</span> + <span class="built_in">this</span>.age);</span><br><span class="line">        <span class="built_in">super</span>.age();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">main</span><span class="params">(String[] ages)</span>&#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">ani</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"></span><br><span class="line">        ani.age();</span><br><span class="line"><span class="comment">//        ((Cat) ani).name = &quot;小红&quot;;</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> (Cat)ani;</span><br><span class="line">        System.out.println(((Cat)ani).name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>子类集成父类  父类 变量 &#x3D; new 子类();继承的基本条件</p><p>子类要重载(重写) 父类中方法继承条件2</p><p>多态触发后 子类除了重写的方法 其余方法、属性都将<strong>不可见</strong>(但创建的属性方法都存在)，因此任何在子类中访问非重写方法都是未定义的；</p><p>可通过向下强转回该类 方法与强转基础数据类型一致 </p></blockquote><ul><li>作用使程序有很强的拓展性</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java -基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java  Day1</title>
      <link href="/2022/11/03/Java_Day1/"/>
      <url>/2022/11/03/Java_Day1/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h1><h2 id="1-JAVA环境-JDK，JRE，JVM"><a href="#1-JAVA环境-JDK，JRE，JVM" class="headerlink" title="1.JAVA环境(JDK，JRE，JVM)"></a>1.JAVA环境(JDK，JRE，JVM)</h2><p>简单的关系图</p><p><img src="/%5Cimages%5Cimage-20221019151518476.png" alt="image-20221019151518476"></p><p>完整关系</p><p><img src="/%5Cimages%5Cimage-20221019151618933.png" alt="image-20221019151618933"></p><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><h3 id="1-命令行编译Java"><a href="#1-命令行编译Java" class="headerlink" title="1.命令行编译Java"></a>1.命令行编译Java</h3><p><code>Javac Main.java</code>编译生成.class文件</p><p><code>Java Main</code>运行编译后的Main.Class</p><ul><li>严格区分大小写</li><li>Class类名要与文件名一致</li><li>确保Java环境正常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">  <span class="comment">/*Main 要与java文件一致*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/%5Cimages%5Cimage-20221019153410698.png" alt="image-20221019153410698"></p><p><img src="/%5Cimages%5Cimage-20221019154609436.png" alt="image-20221019154609436"></p><p>编译后生成Main.class</p><p><img src="/%5Cimages%5Cimage-20221019154717224.png" alt="image-20221019154717224"></p><p><img src="/%5Cimages%5Cimage-20221019154919764.png" alt="image-20221019154919764"></p><h2 id="Java-程序运行机制"><a href="#Java-程序运行机制" class="headerlink" title="Java 程序运行机制"></a>Java 程序运行机制</h2><ul><li><p>java介于 解释型 和 编译型</p></li><li><p>编译型 更改需要重新编译 </p></li><li><p>解释性 同步执行 效率不高</p></li></ul><p><img src="/%5Cimages%5Cimage-20221019160536090.png" alt="image-20221019160536090"></p><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><ul><li>常用的Dos命令</li></ul><p><img src="/%5Cimages%5Cimage-20221020195616664.png" alt="image-20221020195616664"></p><ul><li><p>Java 特性</p><p><img src="/%5Cimages%5Cimage-20221020195720695.png" alt="image-20221020195720695"></p></li></ul><p><img src="/%5Cimages%5Cimage-20221020195829199.png" alt="image-20221020195829199"></p><ul><li><p>强类型语言Java,C++,C</p><ul><li>要求变量的使用严格符合规定，所有变量必须定义初始化后使用</li></ul></li><li><p>弱类型语言    python,VB,Js</p><ul><li>变量使用没有太多规范</li></ul></li><li><p>进制 前缀</p><ul><li><p>二进制0b</p></li><li><p>十进制</p></li><li><p>八进制0</p></li><li><p>十六进制0x</p><p>高容量转低容量，要截断，因此强转会丢失精度</p><p>不能对bool值进行转换</p></li></ul></li><li><p>JDK7新特性，数字之间可以用下划线分割提高可读性</p></li><li><p>final定义常量 无法更改 </p></li><li><p>javadoc -encoding UTF-8 -charset UTF-8 Doc.java   转码utf</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java -基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java  Day7</title>
      <link href="/2022/11/03/Java_Day7/"/>
      <url>/2022/11/03/Java_Day7/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-day7"><a href="#Java-day7" class="headerlink" title="Java day7"></a>Java day7</h1><h2 id="1-面向对象"><a href="#1-面向对象" class="headerlink" title="1.面向对象"></a>1.面向对象</h2><ul><li>面向过程：自下而上</li><li>面向对象：自上而下</li></ul><h3 id="对象有什么？"><a href="#对象有什么？" class="headerlink" title="对象有什么？"></a>对象有什么？</h3><p>属性：成员变量来描述，直接写在类中的变量</p><p>方法：定义在类中的函数也叫成员方法</p><p>new 关键字创建一个方法，new的过程叫做创建对象</p><ul><li><p>java分为两种数据类型：</p><ul><li>基本数据类型</li><li>引用数据类型(String和所有创建的类)</li></ul></li><li><p>非static修饰的方法必须通过对象或者引用去调用</p></li><li><p>对象中如果有属性大部分都相同可以先设置一个默认值</p></li></ul><h2 id="2-this"><a href="#2-this" class="headerlink" title="2.this"></a>2.this</h2><p>在调用方法的时候，java会自动把当前对象传递给方法，也就是this引用（隐式声明的一个引用）</p><ul><li>变量的查找顺序，一个方法内的局部变量，如果在类中有定义它会自己使用this访问本方法的属性，但是如果传递的形参和属性一样那它就会使用改形参。就近原则</li></ul><h4 id="this表示当前类的对象"><a href="#this表示当前类的对象" class="headerlink" title="this表示当前类的对象"></a>this表示当前类的对象</h4><h4 id="this可以访问成员属性"><a href="#this可以访问成员属性" class="headerlink" title="this可以访问成员属性"></a>this可以访问成员属性</h4><h4 id="this可以区分局部和成员变量"><a href="#this可以区分局部和成员变量" class="headerlink" title="this可以区分局部和成员变量"></a>this可以区分局部和成员变量</h4><h2 id="3-构造方法"><a href="#3-构造方法" class="headerlink" title="3.构造方法"></a>3.构造方法</h2><p>语法</p><blockquote><p>public 类名(参数{</p><p>}；</p></blockquote><ul><li><p>没有返回值；</p></li><li><p>执行new中会调用构造方法；</p></li><li><p>java会自动给每一个类一个无参数的构造方法，但如果你定义了这个就不存在了。</p></li></ul><p>构造方法会在创建对象的时候，给对象设置属性的信息；</p><ul><li>构造方法也是方法，也可以进行重载。能有更多的方法创建对象</li><li>如果一个类的两种构造方法十分类似</li></ul><p>this可以调用当前类中的其他构造方法，使代码变得更简洁。</p><blockquote><p>&#x2F;&#x2F;这是一个类的两个不同的构造方法</p><p>public a(int a，int b){</p><p>​this.a &#x3D; a;</p><p>​this.b &#x3D; b;</p><p>}</p><p>public a(int a，int b， int c){</p><p>​&#x2F;&#x2F;实用this调用第一个构造方法减少代码量使其更加简洁明了</p><p>this(a ，b)；</p><p>this.c &#x3D; c;</p><p>}</p></blockquote><h2 id="4-static"><a href="#4-static" class="headerlink" title="4.static"></a>4.static</h2><ul><li>static修饰的变量，在类中是单独独立的一块内存单元，所有类所创建的对象包括类本身都指向这块内存。<ul><li>数据共享</li><li>优先于对象产生(在类加载还未创建的时候)</li><li>注意用类来访问静态变量提高可读性</li></ul></li></ul><blockquote><p>java创建对象的过程主要分为一下五个步骤：<br>（1）类加载检查<br>Java虚拟机（jvm）在读取一条new指令时候，首先检查能否在常量池中定位到这个类的符号引用，并且检查这个符号引用代表的类是否被加载、解析和初始化。如果没有，则会先执行相应的类加载过程。</p><p>（2）内存分配<br>在通过（1）后，则开始为新生的对象分配内存。该对象所需的内存大小在类加载完成后便可确定，因此为每个对象分配的内存大小是确定的。而分配方式主要有两种，分别为：</p><p>1.指针碰撞</p><p>应用场合：堆内存规整（通俗的说就是用过的内存被整齐充分的利用，用过的内存放在一边，没有用过的放在另外一边，而中间利用一个分界值指针对这两边的内存进行分界，从而掌握内存分配情况）。</p><p>即在开辟内存空间时候，将分界值指针往没用过的内存方向移动向应大小位置即可）。</p><p>将堆内存这样划分的代表的GC收集器算法有：Serial，ParNew</p><p>2.空闲列表</p><p>应用场合;堆内存不规整（虚拟机维护一个可以记录内存块是否可以用的列表来了解内存分配情况）</p><p>即在开辟内存空间时候，找到一块足够大的内存块分配给该对象即可，同时更新记录列表。</p><p>将堆内存这样划分的代表的GC收集器算法有：CMS</p><p>（3）初始化默认值<br>第（2）步完成后，紧接着，虚拟机需要将分配到的内存空间都进行初始化（即给一些默认值），这将做是为了保证对象实例的字段在Java代码中可以在不赋初值的情况下使用。程序可以访问到这些字段对用数据类型的默认值。</p><p>（4）设置对象头<br>初始化（3）完成后，虚拟机对对象进行一些简单设置，如标记该对象是哪个类的实例，这个对象的hash码，该对象所处的年龄段等等（这些可以理解为对象实例的基本信息）。这些信息被写在对象头中。jvm根据当前的运行状态，会给出不同的设置方式。</p><p>（5）执行初始化方法<br>在（4）完成后，最后执行由开发人员编写的对象的初始化方法，把对象按照开发人员的设计进行初始化，一个对象便创建出来了。</p></blockquote><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><h5 id="Java构造器调用顺序"><a href="#Java构造器调用顺序" class="headerlink" title="Java构造器调用顺序"></a>Java构造器调用顺序</h5><p><strong>静态代码块static修饰</strong></p><p><strong>构造代码块无关键词修饰的代码块            {   }</strong></p><p><strong>构造器 构造方法</strong></p><p><strong>普通代码块类中的各类方法</strong></p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><ul><li><p>无继承的情况下的执行顺序<strong>静态代码块</strong>：只在程序启动后执行一次，优先级最高<strong>构造代码块</strong>：任何一个构造器被调用的时候，都会先执行构造代码块，<strong>优先级低于静态代码块构造器</strong>：优先级低于构造代码块<strong>总结一下优先级：静态代码块 &gt; 构造代码块 &gt; 构造器</strong></p></li><li><p>有继承的情况下的执行顺序：父类静态代码块：只在程序启动后<strong>执行一次</strong>，<strong>优先级最高</strong> 子类静态代码块：只在程序启动<strong>后执行一次</strong>，<strong>优先级低于父类静态代码块</strong> 父类构造代码块：父类任何一个构造器被调用的时候，都会<strong>执行一次</strong>，优先级<strong>低于子类静态代码块父类构造器</strong>：优先级<strong>低于父类构造代码子类构造代码块</strong>：子类任何一个构造器被调用的时候，都会<strong>执行一次</strong>，优先级低于父类构造器子类构造器：优先级低于子类构造代码块总结一下优先级：<strong>父类静态代码块 &gt; 子类静态代码块 &gt; 父类构造代码块 &gt; 父类构造器 &gt; 子类构造代码块 &gt; 子类构造器</strong></p></li><li><p>如果有<strong>多个静态代码块则按编写顺序执行</strong></p></li><li><p>普通代码块，就是成员方法在创建类实例的时候出现</p><ul><li><p>5.普通代码块介绍</p><p>普通代码块又叫<strong>局部代码块</strong>是放在方法体中，<strong>在所有代码块之后执行</strong>，<strong>并只有调用该方法的时候才会执行。主要是存一些局部变量，因为他会随着方法体的退出而消失，所以他能够减少变量的生命周期，提高内存的使用效率。</strong></p><pre><code> 比如一些只有在某个方法才会用到的属性，计算房屋面积的方法中的一些单位等。</code></pre></li></ul></li><li><p>总结</p><p> 执行顺序：</p><p> 静态代码块》构造代码块》构造方法》普通代码块</p><p>继承关系</p><p>父类静态代码块&gt;子类静态代码块&gt;父类构造代码块&gt;构造方法&gt;子类构造代码块&gt; 子类构造器</p><p> 生命周期</p><p>  静态代码块》构造代码块&#x3D;构造方法》普通代码块</p><p>  代码块的作用主要是把一些程序运行中通用固定的操作给抽出来放在一起执行，具体业务场景选择性的使用各种代码块。</p></li><li><p><strong>静态方法中不能使用或者访问this(对象)<strong>，因为</strong>实例对象还未创建但静态方法已经存在</strong>，由此可见在静态方法中不能使用非静态变量以及对象中 的方法(但静态方法可以访问其他静态方法)</p></li></ul><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><ul><li><h4 id="Java中-包-类似于windows-文件夹-方便管理-和-使用"><a href="#Java中-包-类似于windows-文件夹-方便管理-和-使用" class="headerlink" title="Java中 包 类似于windows 文件夹 方便管理 和 使用"></a>Java中 包 类似于windows 文件夹 方便管理 和 使用</h4><p>包名尽量使用翻转域名。</p><p>com.baidu.tieba</p><p>上述相当于一个三层文件夹com&gt;baidu&gt;tieba</p><p>栗子：</p></li></ul><p><img src="/%5Cimages%5Cimage-20221028231038812.png" alt="image-20221028231038812"></p><h4 id="使用包中类"><a href="#使用包中类" class="headerlink" title="使用包中类"></a>使用包中类</h4><p>要加入packag **;   &#x2F;&#x2F;在什么路径下 包的声明   </p><p><img src="/%5Cimages%5Cimage-20221028231203309.png" alt="image-20221028231203309"></p><h4 id="不同路径下使用其文件的类"><a href="#不同路径下使用其文件的类" class="headerlink" title="不同路径下使用其文件的类"></a>不同路径下使用其文件的类</h4><p>improt **.Student；&#x2F;&#x2F;导入包 导入Student类  </p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>package 声明 必须在执行代码前面    第一行</p></li><li><p>import 导入  *可以导入当前路径下所有</p></li><li><p>自己包内不需导包</p></li><li><p>Java.lang包中不需要导入</p><ul><li>String  System等包系统内置的</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java -基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础9</title>
      <link href="/2022/11/03/Java_Day9/"/>
      <url>/2022/11/03/Java_Day9/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-Day9"><a href="#Java-Day9" class="headerlink" title="Java  Day9"></a>Java  Day9</h1><h2 id="1-final-关键字"><a href="#1-final-关键字" class="headerlink" title="1.final 关键字"></a>1.final 关键字</h2><p>final不可更改</p><ol><li>final修饰的成员、局部变量，无法改变，又称为<strong>常量</strong></li><li>被final修饰的方法不可以被重写 </li><li>被final修饰的类无法更改</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Final</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;小张&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Final</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Final</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        </span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">        f.name = <span class="string">&quot;2333&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编译器报错</span></span><br></pre></td></tr></table></figure><ul><li>局部变量和成员变量name 都无法更改</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Final</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;小张&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">hellowold</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Final</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Final</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        a = 1;</span></span><br><span class="line"><span class="comment">//        f.name = &quot;2333&quot;;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">b</span> <span class="keyword">extends</span> <span class="title class_">Final</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hellowold</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编译器报错</span></span><br></pre></td></tr></table></figure><ul><li>b 继承 Final 父类 但无法重写其final 方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Final</span>&#123; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">b</span> <span class="keyword">extends</span> <span class="title class_">Final</span>&#123;</span><br><span class="line">    <span class="comment">//无法被继承</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编译器报错</span></span><br></pre></td></tr></table></figure><ul><li>final 类不可以被继承</li></ul><hr><h2 id="2-abstract-关键字"><a href="#2-abstract-关键字" class="headerlink" title="2.abstract 关键字"></a>2.abstract 关键字</h2><ul><li>Java中抽象只声明，<strong>无法被实现</strong>（不能实例化对象）</li><li>抽象中的子类 <strong>必须实现其抽象方法</strong></li><li>接口的方法都是公开抽象</li><li>接口中的所有成员变量都是<strong>public static final修饰的公开静态常量</strong></li></ul><p>1.<strong>抽象类的定义</strong></p><p>用abstract修饰，不可有方法体{}，直接分好结束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">abstract</span> <span class="keyword">class</span>  <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>;    <span class="comment">//每个人工作都不同 我们可以把工作抽象出来 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>有抽象方法的 类  必定是一个抽象类 因此其类必须也要用abstract修饰</p></blockquote><p>2.<strong>继承抽向类必须重写其抽象方法，否则子类也是抽象类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">abstract</span> <span class="keyword">class</span>  <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>;    <span class="comment">//每个人工作都不同 我们可以把工作抽象出来</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">c</span> <span class="variable">w</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">c</span>();</span><br><span class="line">        w.work();</span><br><span class="line">        w.work2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//没有实现父类抽象方法 所以子类b也是抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">b</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">work2</span><span class="params">()</span>;        <span class="comment">//第二份工作</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//最终c类继承抽象b类 所以c类可以实例化</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">c</span> <span class="keyword">extends</span> <span class="title class_">b</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;我的第1份工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;我的第2份工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过抽象类可以强制子类，要求其实现其方法</p><p><strong>抽象类也具有多态性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Abstract</span> &#123;</span><br><span class="line"><span class="comment">//    抽象的多态性</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">function</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">Abstract</span>&#123;</span><br><span class="line"><span class="comment">//    A 实现了抽象父类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">function</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抽象类也能多态&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        多态</span></span><br><span class="line">        <span class="type">Abstract</span> <span class="variable">Class</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        Class.function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>抽象类中也允许有普通方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Abstract</span> &#123;</span><br><span class="line"><span class="comment">//    这是一个抽象类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">helloworld</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;抽象类也允许有普通方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-interface-关键字"><a href="#3-interface-关键字" class="headerlink" title="3.interface 关键字"></a>3.interface 关键字</h2><p>接口<strong>（实际上是一种特殊的抽象类，但接口  相对于  抽象类  不同的是所有的方法必须是抽象方法不能有其他普通方法但可以拥有成员变量）</strong></p><ol><li><p>接口使用<strong>interface</strong>声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterFace</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;这个是一个特殊抽象类，接口&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">function</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>接口中所有方法，<strong>默认抽象且公开</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterFace</span> &#123;</span><br><span class="line">    <span class="comment">//变量是公开静态常量  即  public static final String name;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;2333&quot;</span>;</span><br><span class="line"><span class="comment">// public abastract  编译器会自动添加</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">function</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//-&gt;public abstract void function2()   完整的修饰</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">function2</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>**使用extends 的继承   **</p><p>InterFace2 继承 接口父类 但未实现因此不能用class 声明 InterFace2只能是接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterFace</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;这个是一个特殊抽象类，接口&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">function</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">InterFace2</span> <span class="keyword">extends</span> <span class="title class_">InterFace</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>**使用implements的继承 实现了其方法  **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterFace</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;这个是一个特殊抽象类，接口&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">function</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">InterFace2</span> <span class="keyword">extends</span> <span class="title class_">InterFace</span>&#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">fucntion2</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口方法 _Class 类可以被实例化</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">_Class</span> <span class="keyword">implements</span> <span class="title class_">InterFace2</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">function</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实现了InterFace的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fucntion2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实现了InterFace2   的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口多态</p><p>接口1 继承 接口类  _Class继承了接口1类 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterFace</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;这个是一个特殊抽象类，接口&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">function</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">InterFace2</span> <span class="keyword">extends</span> <span class="title class_">InterFace</span>&#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">fucntion2</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">_Class</span> <span class="keyword">implements</span> <span class="title class_">InterFace2</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">function</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实现了InterFace的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fucntion2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实现了InterFace2   的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        接口多态</span></span><br><span class="line">        <span class="type">InterFace</span> <span class="variable">Class</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">_Class</span>();</span><br><span class="line">        </span><br><span class="line">        Class.function();</span><br><span class="line">        <span class="comment">//这里要强制转换 因为function2  是 2接口的 抽象类 抽象父类接口是隐藏的</span></span><br><span class="line">        ((InterFace2)Class).fucntion2();</span><br><span class="line"><span class="comment">//        Class.function2();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>接口可以把很多不相同的内容进行整合</li></ul><h2 id="4-Java实现”多继承”"><a href="#4-Java实现”多继承”" class="headerlink" title="4.Java实现”多继承”"></a>4.Java实现”多继承”</h2><p>Java只能单继承(只能继承一个类类)，但是可以通过interface 接口实现类似于多继承的关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">God</span> <span class="keyword">extends</span> <span class="title class_">Money</span> <span class="keyword">implements</span> <span class="title class_">Decorations</span>, Metal&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decorations</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;黄金可以制作黄金饰品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">metal</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;黄金是金属，可做导体&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//多态</span></span><br><span class="line">       <span class="type">Money</span> <span class="variable">g</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">God</span>();</span><br><span class="line">        g.Value();</span><br><span class="line">        ((Decorations)g).decorations();</span><br><span class="line">        ((Metal)g).metal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Money</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Value</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具有货币性质&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Decorations</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">decorations</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Metal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">metal</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java -基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java  Day6</title>
      <link href="/2022/11/03/Java_Day6/"/>
      <url>/2022/11/03/Java_Day6/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-day6"><a href="#Java-day6" class="headerlink" title="Java day6"></a>Java day6</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p><strong>（Object Oriented Programming，OO）</strong></p><h3 id="1-面向对象的思想"><a href="#1-面向对象的思想" class="headerlink" title="1.面向对象的思想"></a>1.面向对象的思想</h3><ul><li><p>面向过程思想</p><ul><li>线性思维，一步一步做，步骤清晰简单适合一些较为简单的问题</li><li>适合解决一些小的问题</li><li>造轮子</li></ul></li><li><p>面向对象思想</p><ul><li>物以类聚，分类的思维模式，思考问题首先解决问题需要那些分类。最终才对某个分类下的细节进行全面向过程的思索。</li><li>面向对象更适合处理一些复杂的问题，是和处理需要多人协作的问题。</li><li>造车</li></ul></li><li><p>对于描述复杂的事物，为了从宏观上把握，从整体上合理的分析。</p></li></ul><h3 id="2-面向对象三大特性"><a href="#2-面向对象三大特性" class="headerlink" title="2.面向对象三大特性"></a>2.面向对象三大特性</h3><ul><li>封装</li><li>继承</li><li>多态</li></ul><h3 id="3-类与对象的关系"><a href="#3-类与对象的关系" class="headerlink" title="3.类与对象的关系"></a>3.类与对象的关系</h3><ul><li><p>从认识论的角度考虑是，<strong>先有对象后有类。对象，是具体的事物。类是对对象的抽象</strong>。</p></li><li><p>在编程中是相反的，是先有类后又对象。类是对象的模板。</p></li></ul><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="1-类-方法"><a href="#1-类-方法" class="headerlink" title="1.类-方法"></a>1.类-方法</h3><ul><li>定义一个方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    修饰符 返回值类型 方法名(....)&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello,world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一个类中只能有一个public class</li></ul><h3 id="2-break-和-return区别"><a href="#2-break-和-return区别" class="headerlink" title="2.break 和 return区别"></a>2.break 和 return区别</h3><ul><li><p>return</p><ul><li>函数的结束</li><li>返回值必须与函数返回值一样</li></ul></li><li><p>break</p><ul><li>跳出循环</li></ul></li></ul><h3 id="补充-可变形参"><a href="#补充-可变形参" class="headerlink" title="补充 可变形参"></a>补充 可变形参</h3><ul><li><p>Java中函数参数不确定有多少</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    修饰符 返回值类型 方法名(....)&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    可变形参</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(<span class="type">int</span> ...i)</span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;这个函数可以有多个参数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(<span class="type">int</span> j, <span class="type">int</span> ...i)</span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;函数为可变形参时候要注意，可变形参必须在最后一位&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>补充 ，一个函数定义只能一个可变形参，多个形参会报错</li></ul></li></ul><h3 id="3静态方法与非静态方法调用"><a href="#3静态方法与非静态方法调用" class="headerlink" title="3静态方法与非静态方法调用"></a>3静态方法与非静态方法调用</h3><ul><li>静态方法 在定义类的时候就创建</li><li>非静态方法 实例化一个对象后才存在</li><li>静态方法与非静态方法不是在一个层级，静态与类一起加载而非静态与实例化对象一起加载，<ul><li>定义一个类，静态方法不能调用非静态方法（静态方法存在时，非静态方法还是未定义）</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">static_say</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用静态方法 public&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用非静态方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>学生类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//     静态方法调用</span></span><br><span class="line">        Student.static_say();</span><br><span class="line"><span class="comment">//        Student.say();//这是一个非static修饰的方法 非静态方法只能创建一个实列对象来初始化</span></span><br><span class="line"><span class="comment">//      非静态方法调用   实例化这个类</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.say();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4Java是值传递"><a href="#4Java是值传递" class="headerlink" title="4Java是值传递"></a>4Java是值传递</h3><ul><li><p>通过函数实参传递给形参时，不会改变实际参数的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.Skr.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   <span class="comment">//  静态方法调用</span></span><br><span class="line">        Student.static_say();</span><br><span class="line"><span class="comment">//        Student.say();//这是一个非static修饰的方法 非静态方法只能创建一个实列对象来初始化</span></span><br><span class="line"><span class="comment">//      非静态方法调用   实例化这个类</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="comment">//        通过实例化才能 通过实例化对象使用非静态方法</span></span><br><span class="line">        student.say();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过引用改变其值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="comment">//        输出为空</span></span><br><span class="line">        System.out.println(person.name);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        引用传递改变其值</span></span><br><span class="line">        change(person);</span><br><span class="line">        System.out.println(person.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(Person p)</span>&#123;</span><br><span class="line">        p.name = <span class="string">&quot;通过引用改变的值&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-new关键字"><a href="#5-new关键字" class="headerlink" title="5.new关键字"></a>5.new关键字</h3><p>类似于C中 malloc()</p><ul><li><p>使用new关键字创建对象，除了分配内存空间之外，<strong>还会给创建好的对象进行默认的初始化以及对类中的构造器的调用</strong></p></li><li><p>类中的构造器也称为构造方法，构造函数是在进行创建对象的时候必须要调用的，并且构造器有一个特点</p><ul><li>必须和类的名字相同</li><li>必须没有返回类型，也不能写void</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.Skr.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//       类实例化后会返回一个自己的对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.study();</span><br><span class="line"></span><br><span class="line">        student.name = <span class="string">&quot;小明&quot;</span>;</span><br><span class="line">        student.study();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//x学生类</span></span><br><span class="line"><span class="keyword">package</span> com.Skr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name+<span class="string">&quot;在学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ps 类中属性 要声明public 外部才能访问，否则只能通过内部方法调用</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java -基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello My Blog</title>
      <link href="/2022/11/02/hello-world/"/>
      <url>/2022/11/02/hello-world/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>用于测试</p><p>data：2022年11月2日19:51:27</p></blockquote><h1 id="凸-艹皿艹-搞了2天终于搞好了！我太蠢了！"><a href="#凸-艹皿艹-搞了2天终于搞好了！我太蠢了！" class="headerlink" title="凸(艹皿艹 ) 搞了2天终于搞好了！我太蠢了！"></a>凸(艹皿艹 ) 搞了2天终于搞好了！我太蠢了！</h1><p><img src="/images/nxd.jpg"></p><h3 id="为什么写博客呢？"><a href="#为什么写博客呢？" class="headerlink" title="为什么写博客呢？"></a>为什么写博客呢？</h3><p>我觉得学东西总是要输出的，傻傻的学不做点笔记以后很容易忘记！</p><p>博客是一种很好的记录工具！！</p><p>致—–以后的自己</p><hr>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
